  // Initialize the FirebaseUI Widget using Firebase.
// var ui = new firebaseui.auth.AuthUI(firebase.auth());

ui.start('#firebaseui-auth-container', {
    signInOptions: [
      firebase.auth.PhoneAuthProvider.PROVIDER_ID
    ],
    // Other config options...
  });
// The start method will wait until the DOM is loaded.
ui.start('#firebaseui-auth-container', uiConfig);
  var uiConfig = {
    callbacks: {
      signInSuccessWithAuthResult: function(authResult, redirectUrl) {
        // User successfully signed in.
        // Return type determines whether we continue the redirect automatically
        // or whether we leave that to developer to handle.
        return true;
      },
      uiShown: function() {
        // The widget is rendered.
        // Hide the loader.
        document.getElementById('loader').style.display = 'none';
      }
    },
    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.
    signInFlow: 'popup',
    signInSuccessUrl: '<url-to-redirect-to-on-success>',
    signInOptions: [
      // Leave the lines as is for the providers you want to offer your users.
      firebase.auth.GoogleAuthProvider.PROVIDER_ID,
      firebase.auth.FacebookAuthProvider.PROVIDER_ID,
      firebase.auth.TwitterAuthProvider.PROVIDER_ID,
      firebase.auth.GithubAuthProvider.PROVIDER_ID,
      firebase.auth.EmailAuthProvider.PROVIDER_ID,
      firebase.auth.PhoneAuthProvider.PROVIDER_ID
    ],
    // Terms of service url.
    tosUrl: '<your-tos-url>',
    // Privacy policy url.
    privacyPolicyUrl: '<your-privacy-policy-url>'
  };
   //init firebase app
initializeApp(firebaseConfig)
 



//firebase sign in
var firebase = require('firebase');
var firebaseui = require('firebaseui');

var ui = new firebaseui.auth.AuthUI(firebase.auth());


//User Login message
You're logged in as  (uid: ${user.firstName}, email: ${user.email})


STYLING


/* .container {
    background-color: #fff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
    text-align: center;
} */

h1 {
    margin-bottom: 20px;
}
main{
    display: grid;
    grid-template-columns: repeat(3,1fr);

}
.visitor-card{
    border: #0056b3;
    background-color: gainsboro;
    margin-right: 14px;
    border-radius: 4px;


}
/* label, input, button {
    display: block;
    margin: 10px 0;
} */

/* button {
    background-color: #007BFF;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s; /* Add transition for a smooth effect */
/* } */ 

button:hover {
    background-color: #0056b3; /* Change background color on hover */
}

.error-message {
    color: red;
}

/* Style the logout button */
.logout-button {
    background-color: #dc3545; /* Red color for the logout button */
}

.logout-button:hover {
    background-color: #a71b1b; /* Darker red color on hover */
}
//queries
// const q = query(colRef, orderBy('surName','asc'));
// const btnLogin = document.querySelector('#btnLogin')
// console.log("hi")
// btnLogin.addEventListener('submit',(e) => {
//     e.preventDefault()
//     const email = btnLogin.email.value
//     const password = btnLogin.password.value
//     console.log("hi")
//     signInWithEmailAndPassword(auth,email,password)
//             .then((cred) =>{
//                 console.log('here we are',cred.user)
//             })
//             .catch(()=> {
//                 console.log('erro found')
//             })
// })